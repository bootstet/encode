(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{308:function(t,e,a){t.exports=a.p+"assets/img/3.68942ea6.png"},352:function(t,e,a){t.exports=a.p+"assets/img/1.e00bb30d.png"},353:function(t,e,a){t.exports=a.p+"assets/img/5.147f4235.gif"},354:function(t,e,a){t.exports=a.p+"assets/img/2.f34db7a4.png"},355:function(t,e,a){t.exports=a.p+"assets/img/4.704584ae.jpg"},356:function(t,e,a){t.exports=a.p+"assets/img/6.d58f9a83.png"},446:function(t,e,a){"use strict";a.r(e);var n=a(25),s=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"_1-react-介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-react-介绍"}},[t._v("#")]),t._v(" 1. React 介绍")]),t._v(" "),e("img",{attrs:{src:a(352),width:"70%"}}),t._v(" "),e("p",[t._v("React 是一个用于构建用户界面的 JavaScript 库，它只负责应用的视图层，帮助开发人员构建快速且交互式的 web 应用程序。")]),t._v(" "),e("p",[t._v("React 使用组件的方式构建用户界面。")]),t._v(" "),e("h3",{attrs:{id:"_2-jsx-语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-jsx-语法"}},[t._v("#")]),t._v(" 2. JSX 语法")]),t._v(" "),e("p",[t._v("在 React 中使用 JSX 语法描述用户界面，它是一种 JavaScript 语法扩展。")]),t._v(" "),e("p",[t._v("在 React 代码执行之前，Babel 会将 JSX 语法转换为标准的 JavaScript API。")]),t._v(" "),e("p",[t._v("JSX 语法就是一种语法糖，让开发人员使用更加舒服的代码构建用户界面。")]),t._v(" "),e("h4",{attrs:{id:"_2-1-在-jsx-中使用表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-在-jsx-中使用表达式"}},[t._v("#")]),t._v(" 2.1 在 JSX 中使用表达式")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const user = {\n  firstName: 'Harper',\n  lastName: 'Perez'\n}\nfunction formatName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\nconst element = <h1>Hello, {formatName(user)}!</h1>;\n")])])]),e("p",[t._v("JSX 本身其实也是一种表达式，将它赋值给变量，当作参数传入，作为返回值都可以。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function getGreeting(user) {\n  if (user) {\n    return <h1>Hello, {formatName(user)}!</h1>;\n  }\n  return <h1>Hello, Stranger.</h1>;\n}\n")])])]),e("h4",{attrs:{id:"_2-2-属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-属性"}},[t._v("#")]),t._v(" 2.2 属性")]),t._v(" "),e("p",[t._v("如果属性值为字符串类型，需要加引号，属性名称推荐采用驼峰式命名法。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('const element = <div greeting="hello"></div>;\n')])])]),e("p",[t._v("如果属性值为JavaScript表达式，属性值外面加大括号。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const element = <img src={user.avatarUrl} />;\n// 注意大括号外面不能加引号，JSX 会将引号当中的内容识别为字符串而不是表达式\n")])])]),e("h4",{attrs:{id:"_2-3-jsx-单标记必须闭合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-jsx-单标记必须闭合"}},[t._v("#")]),t._v(" 2.3 JSX 单标记必须闭合")]),t._v(" "),e("p",[t._v("如果 JSX 是单标记，必须闭合，否则报错。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('const element = <img src={user.avatarUrl} />\nconst element = <input type="text"/>\n')])])]),e("h4",{attrs:{id:"_2-4-classname"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-classname"}},[t._v("#")]),t._v(" 2.4 className")]),t._v(" "),e("p",[t._v("为 JSX 标记添加类名需要使用 className，而不是class。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('const element = <img src={user.avatarUrl} className="rounded"/>;\n')])])]),e("h4",{attrs:{id:"_2-5-jsx-自动展开数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-jsx-自动展开数组"}},[t._v("#")]),t._v(" 2.5  JSX 自动展开数组")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const ary = [<p>哈哈</p>, <p>呵呵</p>, <p>嘿嘿</p>];\nconst element = (\n\t<div>{ary}</div>\n);\n// 解析后\n/*\n\t<div>\n\t\t<p>哈哈</p>\n\t\t<p>呵呵</p>\n\t\t<p>嘿嘿</p>\n\t</div>\n*/\n")])])]),e("h4",{attrs:{id:"_2-6-三元运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-三元运算"}},[t._v("#")]),t._v(" 2.6 三元运算")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{ boolean ? <div>Hello React</div> : null }\n{ boolean && <div>Hello React</div> }\n")])])]),e("h4",{attrs:{id:"_2-7-循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-循环"}},[t._v("#")]),t._v(" 2.7 循环")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const persons = [{\n  id: 1,\n  name: '张三',\n  age: 20\n}, {\n  id: 2,\n  name: '李四',\n  age: 15\n}, {\n  id: 3,\n  name: '王五',\n  age: 22\n}]\n")])])]),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<ul>\n  { persons.map(person => <li key={person.id}> {person.name} {person.age} </li>) }\n</ul>\n")])])]),e("h4",{attrs:{id:"_2-8-事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-事件"}},[t._v("#")]),t._v(" 2.8 事件")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{/* 第一个参数即是事件对象 不需传递 */}\n<button onClick={this.eventHandler}>按钮</button>\n{/* 需要传递事件对象 */}\n<button onClick={e=>this.eventHandler('arg',e)}>按钮</button>\n{/* 最后一个参数即是事件对象 不需传递 */}\n<button onClick={this.eventHandler.bind(null, 'arg')}>按钮</button>\n")])])]),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("constructor () {\n  this.eventHandler = this.eventHandler.bind(this)\n}\neventHandler () {}\n<button onClick={this.eventHandler}>按钮</button>\n")])])]),e("h4",{attrs:{id:"_2-9-样式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-样式"}},[t._v("#")]),t._v(" 2.9 样式")]),t._v(" "),e("h5",{attrs:{id:"_2-9-1-行内样式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-1-行内样式"}},[t._v("#")]),t._v(" 2.9.1 行内样式")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class App extends Component {\n  render() {\n    const style = {width: 200, height: 200, backgroundColor: 'red'};\n    return <div style={style}></div>\n  }\n}\n")])])]),e("h5",{attrs:{id:"_2-9-2-外链样式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-2-外链样式"}},[t._v("#")]),t._v(" 2.9.2 外链样式")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// Button.js\nimport styles from './Button.module.css';\nclass Button extends Component {\n  render() {\n    return <button className={styles.error}>Error Button</button>;\n  }\n}\n")])])]),e("h5",{attrs:{id:"_2-9-3-全局样式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-3-全局样式"}},[t._v("#")]),t._v(" 2.9.3 全局样式")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import './styles.css'\n")])])]),e("h4",{attrs:{id:"_2-10-ref-属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-ref-属性"}},[t._v("#")]),t._v(" 2.10 ref 属性")]),t._v(" "),e("h5",{attrs:{id:"_2-10-1-createref"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-1-createref"}},[t._v("#")]),t._v(" 2.10.1 createRef")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class Input extends Component {\n  constructor() {\n    super()\n    this.inputRef = React.createRef()\n  }\n  render() {\n    return (\n      <div>\n        <input type="text" ref={this.inputRef} />\n        <button onClick={() => console.log(this.inputRef.current)}> button </button>\n      </div>\n    )\n  }\n}\n')])])]),e("h5",{attrs:{id:"_2-10-2-函数参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-2-函数参数"}},[t._v("#")]),t._v(" 2.10.2 函数参数")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class Input extends Component {\n  render() {\n    return (\n      <div>\n        <input type="text" ref={input => (this.input = input)} />\n        <button onClick={() => console.log(this.input)}>button</button>\n      </div>\n    )\n  }\n}\n')])])]),e("h5",{attrs:{id:"_2-10-3-ref-字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-3-ref-字符串"}},[t._v("#")]),t._v(" 2.10.3 ref 字符串")]),t._v(" "),e("p",[t._v("不推荐使用，在严格模式下报错。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class Input extends Component {\n  render() {\n    return (\n      <div>\n        <input type="text" ref="username" />\n        <button onClick={() => console.log(this.refs.username)}>button</button>\n      </div>\n    )\n  }\n}\n')])])]),e("h5",{attrs:{id:"_2-10-4-获取组件实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-4-获取组件实例"}},[t._v("#")]),t._v(" 2.10.4 获取组件实例")]),t._v(" "),e("p",[t._v("点击按钮让 input 文本框获取焦点。")]),t._v(" "),e("p",[t._v("input 文本框以及让文本框获取焦点的方法定义在 Input 组件中，在 App 组件中引入 Input 组件，按钮定义在 App 组件中。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// Input.js\nclass Input extends Component {\n  constructor() {\n    super()\n    this.inputRef = React.createRef()\n    this.focusInput = this.focusInput.bind(this)\n  }\n  focusInput() {\n    this.inputRef.current.focus()\n  }\n  render() {\n    return (\n      <div>\n        <input type="text" ref={this.inputRef} />\n      </div>\n    )\n  }\n}\n')])])]),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// App.js\nclass App extends Component {\n  constructor() {\n    super()\n    this.InputComponentRef = React.createRef()\n  }\n  render() {\n    return (\n      <div className="App">\n        <Input ref={this.InputComponentRef} />\n        <button onClick={() => this.InputComponentRef.current.focusInput()}>button</button>\n      </div>\n    )\n}\n')])])]),e("img",{attrs:{src:a(353)}}),t._v(" "),e("h3",{attrs:{id:"_3-组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-组件"}},[t._v("#")]),t._v(" 3. 组件")]),t._v(" "),e("h4",{attrs:{id:"_3-1-什么是组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-什么是组件"}},[t._v("#")]),t._v(" 3.1 什么是组件")]),t._v(" "),e("p",[t._v("React 是基于组件的方式进行用户界面开发的. 组件可以理解为对页面中某一块区域的封装。")]),t._v(" "),e("img",{attrs:{src:a(354),width:"70%"}}),t._v(" "),e("h4",{attrs:{id:"_3-2-创建组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-创建组件"}},[t._v("#")]),t._v(" 3.2 创建组件")]),t._v(" "),e("h5",{attrs:{id:"_3-2-1-创建类组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-创建类组件"}},[t._v("#")]),t._v(" 3.2.1 创建类组件")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import React, { Component } from 'react';\nclass App extends Component {\n    render () {\n        return <div>Hello, 我是类组件</div>\n    }\n}\n")])])]),e("h5",{attrs:{id:"_3-2-2-创建函数组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-创建函数组件"}},[t._v("#")]),t._v(" 3.2.2 创建函数组件")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const Person = () => {\n     return <div>Hello, 我是函数型组件</div>;\n}\n")])])]),e("p",[e("strong",[t._v("注意事项")])]),t._v(" "),e("ol",[e("li",[t._v("组件名称首字母必须大写，用以区分组件和普通标签。")]),t._v(" "),e("li",[t._v("jsx语法外层必须有一个根元素")])]),t._v(" "),e("h4",{attrs:{id:"_3-3-组件-props"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-组件-props"}},[t._v("#")]),t._v(" 3.3 组件 props")]),t._v(" "),e("h5",{attrs:{id:"_3-3-1-props-传递数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-props-传递数据"}},[t._v("#")]),t._v(" 3.3.1 props 传递数据")]),t._v(" "),e("p",[t._v("在调用组件时可以向组件内部传递数据，在组件中可以通过 props 对象获取外部传递进来的数据。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<Person name="乔治" age="20"/>\n<Person name="玛丽" age="10"/>\n')])])]),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 类组件\nclass Person extends Component {\n  render() {\n    return (\n      <div>\n        <h3>姓名：{this.props.name}</h3>\n        <h4>年龄：{this.props.age}</h4>\n      </div>\n    );\n  }\n}\n")])])]),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 函数组件\nconst Person = props => {\n  return (\n    <div>\n      <h3>姓名：{props.name}</h3>\n      <h4>年龄：{props.age}</h4>\n    </div>\n  );\n}\n")])])]),e("p",[e("strong",[t._v("注意：")])]),t._v(" "),e("ol",[e("li",[t._v("props 对象中存储的数据是只读的，不能在组件内部被修改。")]),t._v(" "),e("li",[t._v("当 props 数据源中的数据被修改后，组件中的接收到的 props 数据会被同步更新。( 数据驱动DOM )")])]),t._v(" "),e("h5",{attrs:{id:"_3-3-2-设置-props-默认值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-设置-props-默认值"}},[t._v("#")]),t._v(" 3.3.2 设置 props 默认值")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class App extends Component {\n    static defaultProps = {}\n}\n")])])]),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function ThemedButton(props) {\n}\nThemedButton.defaultProps = {\n  theme: "secondary",\n  label: "Button Text"\n};\n')])])]),e("h5",{attrs:{id:"_3-3-3-组件-children"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3-组件-children"}},[t._v("#")]),t._v(" 3.3.3 组件 children")]),t._v(" "),e("p",[t._v("通过 props.children 属性可以获取到在调用组件时填充到组件标签内部的内容。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<Person>组件内部的内容</Person>\n")])])]),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const Person = (props) => {\n    return (\n    \t<div>{props.children}</div>\n    );\n}\n")])])]),e("h5",{attrs:{id:"_3-3-4-单向数据流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-4-单向数据流"}},[t._v("#")]),t._v(" 3.3.4 单向数据流")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("在React中, 关于数据流动有一条原则, 就是单向数据流动, 自顶向下, 从父组件到子组件.")])]),t._v(" "),e("li",[e("p",[t._v("单向数据流特性要求我们共享数据要放置在上层组件中.")])]),t._v(" "),e("li",[e("p",[t._v("子组件通过调用父组件传递过来的方法更改数据.")])]),t._v(" "),e("li",[e("p",[t._v("当数据发生更改时, React会重新渲染组件树.")])]),t._v(" "),e("li",[e("p",[t._v("单向数据流使组件之间的数据流动变得可预测. 使得定位程序错误变得简单.")])])]),t._v(" "),e("img",{attrs:{src:a(308)}}),t._v(" "),e("h4",{attrs:{id:"_3-4-类组件状态-state"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-类组件状态-state"}},[t._v("#")]),t._v(" 3.4 类组件状态 state")]),t._v(" "),e("h5",{attrs:{id:"_3-4-1-定义组件状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-定义组件状态"}},[t._v("#")]),t._v(" 3.4.1 定义组件状态")]),t._v(" "),e("p",[t._v("类组件除了能够从外部 (props) 接收状态数据以外还可以拥有自己的状态 (state)，此状态在组件内部可以被更新，状态更新 DOM 更新。")]),t._v(" "),e("p",[t._v("组件内部的状态数据被存储在组件类中的 state 属性中，state 属性值为对象类型，属性名称固定不可更改。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      person: { name: '张三', age: 20 },\n    }\n  }\n  render () {\n    return (\n      <div>\n        {this.state.person.name}\n        {this.state.person.age}\n      </div>\n    );\n  }\n}\n")])])]),e("h5",{attrs:{id:"_3-4-2-更改组件状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-更改组件状态"}},[t._v("#")]),t._v(" 3.4.2 更改组件状态")]),t._v(" "),e("p",[t._v("state 状态对象中的数据不可直接更改，如果直接更改 DOM 不会被更新，要更改 state 状态数据需要使用 setState方法。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class App extends Component {\n  constructor () {\n    this.state = {\n      person: { name: '张三', age: 20 },\n    }\n    this.changePerson = this.changePerson.bind(this)\n  }\n\tchangePerson () {\n    this.setState({\n      person: {\n        name: '李四',\n        age: 15\n      }\n    })\n  }\n  render() {\n    return (\n      <div>\n        {this.state.person.name}\n        {this.state.person.age}\n        <button onClick={this.changePerson}>按钮</button>\n      </div>\n    );\n  }\n}\n")])])]),e("h5",{attrs:{id:"_3-4-3-双向数据绑定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-3-双向数据绑定"}},[t._v("#")]),t._v(" 3.4.3 双向数据绑定")]),t._v(" "),e("p",[t._v("双向数据绑定是指，组件类中更新了状态，DOM 状态同步更新，DOM 更改了状态，组件类中同步更新。组件 <=> 视图。")]),t._v(" "),e("p",[t._v("要实现双向数据绑定需要用到表单元素和 state 状态对象。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class App extends Component {\n  constructor () {\n    this.state = {\n      name: "张三"\n    }\n    this.nameChanged = this.nameChanged.bind(this)\n  }\n  nameChanged (event) {\n    this.setState({name: event.target.value});\n  }\n  render() {\n    return (\n      <div>\n        <div>{this.state.name}</div>\n        <Person name={this.state.name} changed={this.nameChanged}/>\n      </div>\n    )\n  }\n}\n')])])]),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('const Person = props => {\n\treturn <input type="text" value={props.name} onChange={props.changed}/>;\n}\n')])])]),e("h4",{attrs:{id:"_3-5-类组件生命周期函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-类组件生命周期函数"}},[t._v("#")]),t._v(" 3.5 类组件生命周期函数")]),t._v(" "),e("img",{attrs:{src:a(355)}}),t._v(" "),e("p",[t._v("在组件完成更新之前需要做某种逻辑或者计算，就需要用到快照")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("componentDidUpdate(prevProps, prevState, snapshot) {}\n")])])]),e("p",[t._v("getSnapshotBeforeUpdate 方法会在组件完成更新之前执行，用于执行某种逻辑或计算，返回值可以在 componentDidUpdate 方法中的第三个参数中获取，就是说在组件更新之后可以拿到这个值再去做其他事情。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("getSnapshotBeforeUpdate(prevProps, prevState) {\n  return 'snapshot'\n}\n")])])]),e("h4",{attrs:{id:"_3-6-context"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-context"}},[t._v("#")]),t._v(" 3.6 Context")]),t._v(" "),e("p",[t._v("通过 Context 可以跨层级传递数据")]),t._v(" "),e("img",{attrs:{src:a(356),width:"70%"}}),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// userContext.js\nimport React from "react"\n\nconst userContext = React.createContext("default value")\nconst UserProvider = userContext.Provider\nconst UserConsumer = userContext.Consumer\n\nexport { UserProvider, UserConsumer }\n')])])]),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// App.js\nimport { UserProvider } from "./userContext"\nclass App extends Component {\n  render() {\n    return (\n      <UserProvider value="Hello React Context">\n        <A />\n      </UserProvider>\n    )\n  }\n}\n')])])]),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// C.js\nimport { UserConsumer } from "./userContext"\n\nexport class C extends Component {\n  render() {\n    return (\n      <div>\n        <UserConsumer>\n          {username => {\n            return <div>{username}</div>\n          }}\n        </UserConsumer>\n      </div>\n    )\n  }\n}\n')])])]),e("p",[t._v("context 的另一种用法")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// userContext.js\nexport default userContext\n")])])]),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// C.js\nimport userContext from "./userContext"\n\nexport class C extends Component {\n  static contextType = userContext\n  render() {\n    return (\n      <div>\n        {this.context}\n      </div>\n    )\n  }\n}\n')])])]),e("h3",{attrs:{id:"_4-表单"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-表单"}},[t._v("#")]),t._v(" 4. 表单")]),t._v(" "),e("h4",{attrs:{id:"_4-1-受控表单"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-受控表单"}},[t._v("#")]),t._v(" 4.1 受控表单")]),t._v(" "),e("p",[t._v("表单控件中的值由组件的 state 对象来管理，state对象中存储的值和表单控件中的值时同步状态的")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class App extends Component {\n  constructor () {\n    this.state = { username: "" }\n    this.nameChanged = this.nameChanged.bind(this)\n  }\n  \n  nameChanged (e) {\n    this.setState({username: e.target.value})\n  }\n  render() {\n    return (\n      <form>\n        <p>{this.state.username}</p>\n        <input type="text" value={this.state.username} onChange={this.nameChanged}/>\n      </form>\n    )\n  }\n}\n')])])]),e("h4",{attrs:{id:"_4-2-非受控表单"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-非受控表单"}},[t._v("#")]),t._v(" 4.2 非受控表单")]),t._v(" "),e("p",[t._v("表单元素的值由 DOM 元素本身管理。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class App extends Component {\n  constructor () {\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n  onSubmit(e) {\n    console.log(this.username.value)\n    e.preventDefault();\n  }\n  render(\n    <form onSubmit={this.onSubmit}>\n      <input type="text" ref={username => this.username = username}/>\n    </form>\n  )\n}\n')])])]),e("h3",{attrs:{id:"_5-路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-路由"}},[t._v("#")]),t._v(" 5. 路由")]),t._v(" "),e("p",[t._v("url地址与组件之间的对应关系，访问不同的url地址显示不同的组件。")]),t._v(" "),e("p",[t._v("下载："),e("code",[t._v("npm install react-router-dom")])]),t._v(" "),e("h4",{attrs:{id:"_5-1-1-路由基本使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-1-路由基本使用"}},[t._v("#")]),t._v(" 5.1.1 路由基本使用")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// App.js\nimport React from \'react\';\nimport { BrowserRouter as Router, Route, Link } from \'react-router-dom\';\nfunction Index() {\n\treturn <div>首页</div>;\n}\nfunction News() {\n\treturn <div>新闻</div>;\n}\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Link to="/index">首页</Link>\n        <Link to="/news">新闻</Link>\n      </div>\n      <div>\n        <Route path="/index" component={Index}/>\n        <Route path="/news" component={News}/>\n      </div>\n    </Router>\n  );\n}\n')])])]),e("h4",{attrs:{id:"_5-1-2-路由嵌套"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-2-路由嵌套"}},[t._v("#")]),t._v(" 5.1.2 路由嵌套")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function News(props) {\n  return (\n    <div>\n      <div>\n        <Link to={`${props.match.url}/company`}>公司新闻</Link>\n        <Link to={`${props.match.url}/industry`}>行业新闻</Link>\n      </div>\n      <div>\n        <Route path={`${props.match.path}/company`} component={CompanyNews} />\n        <Route path={`${props.match.path}/industry`} component={IndustryNews}/>  \n      </div>\t\n    </div>\n  );\n}\n\nfunction CompanyNews() {\n\treturn <div>公司新闻</div>\n}\nfunction IndustryNews() {\n\treturn <div>行业新闻</div>\n}\n")])])]),e("h4",{attrs:{id:"_5-1-3-路由传参"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-3-路由传参"}},[t._v("#")]),t._v(" 5.1.3 路由传参")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import url from 'url';\nclass News extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [{\n        id: 1,\n        title: '新闻1'\n      }, {\n        id: 2,\n        title: '新闻2'\n      }]\n    }\n  }\n    \n  render() {\n    return (\n      <div>\n        <div>新闻列表组件</div>\n        <ul>\n          this.state.list.map((item, index) => {\n            return (\n              <li key={index}>\n                <Link to={`/detail?id=${item.id}`}>{item.title}</Link>\n              </li>\n            );\n          })\n        </ul>\n      </div>\n    );\n  }\n}\nclass Detail extends Component {\n  constructor(props) {\n    super(props);\n  }\n\tconst { query } = url.parse(this.props.location.search, true);\n\tconsole.log(query); // {id: 1}\n  render() {\n    return <div>新闻详情</div>\n  }\n}\n")])])]),e("h4",{attrs:{id:"_5-1-4-路由重定向"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-4-路由重定向"}},[t._v("#")]),t._v(" 5.1.4 路由重定向")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import { Redirect } from 'react-router-dom';\n\nclass Login extends Component {\n  render() {\n    if (this.state.isLogin) {\n      return <Redirect to=\"/\"/>\n    }\n  }\n}\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);