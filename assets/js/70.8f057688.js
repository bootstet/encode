(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{424:function(t,a,e){"use strict";e.r(a);var s=e(25),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("数据结构和算法")]),t._v(" "),a("h2",{attrs:{id:"一、-栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、-栈"}},[t._v("#")]),t._v(" 一、 栈")]),t._v(" "),a("h3",{attrs:{id:"栈的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈的概念"}},[t._v("#")]),t._v(" 栈的概念")]),t._v(" "),a("ul",[a("li",[t._v("数据结构中的基础结构，是一种遵从后进先出原则的有序集合")]),t._v(" "),a("li",[t._v("添加新元素的一段称为栈顶，另一端称为栈底")]),t._v(" "),a("li",[t._v("操作栈的元素时，只能从栈顶操作（添加、移除或取值）\n只能从栈顶进行存取操作")])]),t._v(" "),a("h3",{attrs:{id:"栈的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈的实现"}},[t._v("#")]),t._v(" 栈的实现")]),t._v(" "),a("h3",{attrs:{id:"leetcode题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leetcode题目"}},[t._v("#")]),t._v(" LeetCode题目")])])}),[],!1,null,null,null);a.default=r.exports}}]);